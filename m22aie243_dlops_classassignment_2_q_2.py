# -*- coding: utf-8 -*-
"""M22AIE243_DLOps_ClassAssignment_2_Q_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/121lmkJsMHwlCz02Hes6ta1zG57LEjJV5
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import datasets, transforms, models
from torch.utils.data import DataLoader
import matplotlib.pyplot as plt

# Define transforms for data preprocessing
transform = transforms.Compose([
    transforms.Resize(32),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Load STL10 dataset
train_dataset = datasets.STL10(root='./data', split='train', download=True, transform=transform)
test_dataset = datasets.STL10(root='./data', split='test', download=True, transform=transform)

# Define data loaders
train_loader = DataLoader(train_dataset, batch_size=64, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=64, shuffle=False)

# Load pre-trained ResNet50 model
model = models.resnet50(pretrained=True)

# Modify the last fully connected layer for finetuning
num_ftrs = model.fc.in_features
model.fc = nn.Linear(num_ftrs, 10)  # 10 classes in STL10 dataset

# Define optimizers
optimizers = {
    'Adam': optim.Adam(model.parameters(), lr=0.002),
    'Adagrad': optim.Adagrad(model.parameters(), lr=0.02),
    'RMSprop': optim.RMSprop(model.parameters(), lr=0.001),
}

# Define loss function
criterion = nn.CrossEntropyLoss()

# Training function
def train(model, optimizer, criterion, train_loader, epochs=5):
    train_losses = []
    train_accuracies = []
    for epoch in range(epochs):
        model.train()
        running_loss = 0.0
        correct = 0
        total = 0
        for images, labels in train_loader:
            optimizer.zero_grad()
            outputs = model(images)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item() * images.size(0)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct += (predicted == labels).sum().item()

        epoch_loss = running_loss / len(train_loader.dataset)
        epoch_accuracy = 100 * correct / total

        train_losses.append(epoch_loss)
        train_accuracies.append(epoch_accuracy)

        print(f'Epoch {epoch+1}/{epochs}, Loss: {epoch_loss:.4f}, Accuracy: {epoch_accuracy:.2f}%')

    return train_losses, train_accuracies

# Train and plot
plt.figure(figsize=(12, 5))
for i, (optimizer_name, optimizer) in enumerate(optimizers.items(), 1):
    model.fc = nn.Linear(num_ftrs, 10)  # 10 classes in STL10 dataset
    train_losses, train_accuracies = train(model, optimizer, criterion, train_loader)
    plt.subplot(1, 3, i)
    plt.plot(train_losses, label='Training Loss')
    plt.plot(train_accuracies, label='Training Accuracy')
    plt.title(optimizer_name)
    plt.xlabel('Epoch')
    plt.ylabel('Value')
    plt.legend()

plt.tight_layout()
plt.show()

# Test function
def test(model, test_loader):
    model.eval()
    correct_top1 = 0
    total = 0
    with torch.no_grad():
        for images, labels in test_loader:
            outputs = model(images)
            _, predicted = torch.max(outputs, 1)
            total += labels.size(0)
            correct_top1 += (predicted == labels).sum().item()

    top1_accuracy = 100 * correct_top1 / total

    print(f'Top-1 Test Accuracy: {top1_accuracy:.2f}%')

# Evaluate on test set
test(model, test_loader)
